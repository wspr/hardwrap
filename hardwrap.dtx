% \iffalse
%
%<*internal>
\begingroup
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble
  ____________________________
  The HARDWRAP package
  (C) 2010 Will Robertson
  (C) 2010 Kevin Godby
  License information appended

\endpreamble
\postamble

Copyright (C) 2010 by Will Robertson <will.robertson@latex-project.org>
Copyright (C) 2010 by Kevin Godby <godbyk@gmail.com>

Distributable under the LaTeX Project Public License,
version 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status)
by Will Robertson.

This work consists of the file  hardwrap.dtx
          and the derived files hardwrap.sty,
                                hardwrap.ins, and
                                hardwrap.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{hardwrap.sty}{\from{hardwrap.dtx}{package}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internal>
\generate{\file{hardwrap.ins}{\from{hardwrap.dtx}{batchfile}}}
\def\tmpa{plain}
\ifx\tmpa\fmtname\endgroup\expandafter\bye\fi
\endgroup
%</internal>
%
%    \begin{macrocode}
%<*driver>
\ProvidesFile{hardwrap.dtx}
%</driver>
%<package>\ProvidesPackage{hardwrap}
%<*package>
  [2010/10/02 v0.1 Hard wrap messages]
%</package>
%    \end{macrocode}
%
%<*driver>
\documentclass{ltxdoc}
\makeatletter
\renewcommand\meta@font@select{\rmfamily\itshape}

\usepackage[osf,sc]{mathpazo}
\usepackage{inconsolata}
\usepackage[scaled=0.83]{berasans}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[final]{microtype}
\linespread{1.1}
\frenchspacing

\usepackage{geometry}
\geometry{b5paper}


%%%%%
% See http://groups.google.com.au/group/comp.text.tex/msg/7588fd83dd9ce0ea

\usepackage{calc,framed}


\newcommand*{\frametitle}[1]{%
  \noindent\hspace{\dimexpr-\FrameSep-\FrameRule}\parbox{\linewidth}{\centering\strut#1}}%       centered

\expandafter\newif\csname ifcontframe\endcsname

\newcommand*{\Fr@meSetup}[2]{%
  \fboxrule=\FrameRule \fboxsep=\FrameSep
  \global\contframefalse
  \def\Fr@meFirst{#2}%
  \def\Fr@meCont{#1}%
  \def\FrameCommand##1{%
    \Title@Fr@me{\Fr@meCurrent}{##1}%
    \global\let\Fr@meCurrent\Fr@meNext
    \ifcontframe
      \global\let\Fr@meNext\Fr@meCont
    \fi
    \global\contframetrue}%
  \global\let\Fr@meCurrent\Fr@meFirst
  \global\let\Fr@meNext\Fr@meFirst}

\newcommand*{\FrameTitle}[1]{%
  \nobreak \vskip -0.7\FrameSep
    \rlap{\frametitle{#1}}\nobreak\nointerlineskip
    \vskip 0.7\FrameSep}


\newenvironment{framewithtitle}[2][\Fr@meFirst\hfil{\footnotesize({\itshape cont.})}]{%
  \def\Title@Fr@me##1##2{%
    \hspace{\dimexpr-\FrameRule-\FrameSep\relax}%
    \fcolorbox{gray}{white}{%
      \vbox{\FrameTitle{##1}\hbox{##2}}%
    }%
  }%
  \Fr@meSetup{#1}{#2}%
  \MakeFramed{%
    \advance\hsize-\width
    \FrameRestore}}%
  {\global\contframefalse
   \endMakeFramed}

\protected\def\framelabel#1{\texttt{\color{niceblue}\footnotesize#1}}

\def\macrotitle{}
\renewenvironment{macro}[1]{%
  \@for\@ii:={{},#1}\do{%
  \ifx\macrotitle\@empty
    \let\macrotitle\@nil
  \else\ifx\macrotitle\@nil
    \edef\macrotitle{\framelabel{\detokenize\expandafter{\@ii}}}%
  \else
    \edef\macrotitle{\macrotitle\hfil\framelabel{\detokenize\expandafter{\@ii}}}%
  \fi\fi
  }
  \begin{framewithtitle}{\macrotitle}
  \noindent\ignorespaces
}{%
  \end{framewithtitle}
}

\usepackage{titlesec}
\titleformat{\part}{\Large}{Part \thepart}{1em}{\scshape}
\titleformat{\section}{\smallskip\color{niceblue}}{\S\thesection}{1em}{}

\renewcommand\contentsname{}

\usepackage{tocloft,varwidth}
\setcounter{tocdepth}{1}
\def\tocwidthA{0.45}
\def\tocwidthB{0.5}
\renewcommand\cftpartfont{\scshape}
\renewcommand\cftsecfont{\small}
\renewcommand\cftsecpagefont{\small}
\renewcommand\cftpartpagefont{\normalsize}
\setlength\cftbeforesecskip{0pt}
\renewcommand\cftpartleader{}
\renewcommand\cftsecleader{}
\renewcommand\cftpartafterpnum{\cftparfillskip}
\renewcommand\cftsecafterpnum{\cftparfillskip}
\renewcommand\@cftmaketoctitle{\bigskip}

\newcommand\pretoc{{%
  \addtocontents{toc}{%
    \protect\noindent\protect\begin{varwidth}[t]{\tocwidthA\linewidth}%
  }%
}}
\newcommand\splittoc{%
 {\addtocontents{toc}{\protect\end{varwidth}\protect\hfill}}%
 {\addtocontents{toc}{\protect\begin{varwidth}[t]{\protect\tocwidthB\protect\linewidth}}}%
}
\newcommand\posttoc{{\addtocontents{toc}{\protect\end{varwidth}\protect\par}}}

\usepackage{xcolor,hardwrap,lipsum,booktabs,fancyvrb,hypdoc}
\fvset{gobble=2}
\hypersetup{linktocpage,linkcolor=niceblue}

\definecolor{niceblue}{rgb}{0.1,0.3,0.9}
\def\theCodelineNo{\textcolor{niceblue}{\sffamily\tiny\arabic{CodelineNo}}}
\newcommand*\pkg[1]{\textsf{#1}}
\newcommand*{\earg}[1]{{\ttfamily\char`\{}\texttt{#1}{\ttfamily\char`\}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \errorcontextlines=999
% \makeatletter
%
% ^^A TESTING:
% \GeneratePackageLogMacros[HW]{hardwrap}
% \GenerateClassLogMacros[HWC]{hardwrap}
% \HW@info{Testing}
% \HW@info@noline{Testing}
% \HW@warning{Testing}
% \HW@warning@noline{Testing}
% \HW@warning{Terminal spaces used to cause an infinite loop! No more }
% \HW@warning{\space Testing\space\space\space spaces.\space}
% \HW@warning{Hello! This is an example of the hardwrap logging macro. Let us hope that it works properly and wraps our text to just the right length. (These words should reach all the way until the end of TeX's hard-wrapped log file output.) If not, panic!}
% ^^A \HW@error{Hello! This is an example of the hardwrap logging macro. Let us hope that it works properly and wraps our text to just the right length. (These words should reach all the way until the end of TeX's hard-wrapped log file output.) If not, panic!}{}
%
% ^^A CONTINUE:
%
% \GetFileInfo{\jobname.dtx}
%
% \title{The \pkg{\jobname} package}
% \author{Kevin Godby \and Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \begin{abstract}
%   \noindent This package provides facilities for hard-wrapping text to a certain
%   line width. The primary purpose is to make it easier for package authors to write
%   informational messages for the console and log file;
%   wrappers around \cs{PackageWarning} et~al.\ are provided for this.
% \end{abstract}
%
% \tableofcontents
% \bigskip
%
% \pretoc
% \part{User documentation}
% \section{Introduction}
%
% The \pkg{\jobname} package provides a macro for word-wrapping text.  In
% addition, helper macros are available for package and document class authors
% to use in automatically wrapping informational, warning, and error messages.
%
% \section{Wrapping text}
%
% The main function provided by this package is the \cs{HardWrap} command,
% which takes five arguments.
% \begin{quote}
%   \cs{HardWrap} \marg{function} \marg{width} \marg{setup code} \marg{newline} \marg{text}
% \end{quote}
% This command will wrap \meta{text} to a text block of \meta{width} characters
% wide, inserting \meta{newline} at the end of each line and processing the
% result with \meta{function}. The \meta{text} is fully expanded before being
% hard-wrapped; while doing so, the \meta{setup code} may be used to change
% local definitions for commands such as \verb|\\|.
%
% Examples will be given in Section~\ref{examples}.
%
% \section{Wrapping log messages}
%
% A common use case for the \cs{HardWrap} macro is to format the
% informational, warning, and error messages that are printed to the terminal
% and log file.  In support of this, we've provided a simple interface for
% package and document class authors to do this.
%
% \begin{quote}
%   \cs{GeneratePackageLogMacros}\oarg{prefix}\marg{package name}\\
%   \cs{GenerateClassLogMacros}\texttt{\space \space}\oarg{prefix}\marg{class name}
% \end{quote}
% If the optional argument \meta{prefix} is not given, it is set equal to \meta{package name}.
% These two commands will generate the following macros:
%
% \begin{quote}
%   \cs{\meta{prefix}@info}\marg{info}\\
%   \cs{\meta{prefix}@info@noline}\marg{info}\\
%   \cs{\meta{prefix}@warning}\marg{warning}\\
%   \cs{\meta{prefix}@warning@noline}\marg{warning}\\
%   \cs{\meta{prefix}@error}\marg{error}\marg{help}
% \end{quote}
%
% For instance, calling \cs{GeneratePackageLogMacros}\earg{mypackage}
% will create macros called \cs{mypackage@info}, \cs{mypackage@warning}, etc.
% The arguments for the generated macros are the same as the arguments for
% \cs{PackageInfo}\marg{package name}, \cs{PackageWarning}\marg{package name}, etc. Additionally, info messages may be printed with
% \cs{\meta{prefix}@info@noline} in which \LaTeX's
% `\texttt{on line \meta{num}}' suffix is suppressed.
%
% The \cs{GenerateClassLogMacros} command generates similar macros using
% \cs{ClassInfo}\marg{\rmfamily class name}, \cs{ClassWarning}\marg{\rmfamily class name}, etc.
%
% Note that no punctuation is added after messages, unlike standard \LaTeX.
% You are free to punctuate your messages as you wish.
%
% These macros define \verb*|\ | and \verb|\\| locally inside these messages to
% mean, respectively, \meta{space} and \meta{newline}.
% These redefinitions are stored in the macro \cs{HardWrapSetup}, which may
% be altered before executing \cs{Generate...LogMacros} to change the behaviour
% of the generated commands.
%
% \section{Customizing the output}
%
% While \pkg{\jobname} goes to some effort to determine the appropriate line
% lengths, you may wish to override the value found.
%
% \begin{quote}
%   \cs{setmaxprintline}\marg{value}
% \end{quote}
% This macro takes an integer value which is subsquently used as the
% maximum line width allowed in the terminal output and log file. By default
% this value is \texttt{79}.
%
% \section{Examples}
% \label{examples}
%
% \HardWrap{\PackageWarning{foobar}}{50}{\HardWrapSetup}{\MessageBreak}{^^A
%   Sed feugiat. Cum sociis natoque penatibus et
%   magnis dis parturient montes, nascetur ridiculus mus. Ut
%   pellentesque augue sed urna. Vestibulum diam eros, fringilla et,
%   consectetuer eu, nonummy id, sapien. Nullam at lectus. In sagittis
%   ultrices mauris. Curabitur malesuada erat sit amet massa. Fusce
%   blandit. Aliquam erat volutpat.  Aliquam euismod. Aenean vel lectus.
%   Nunc imperdiet justo nec dolor;}
%
% \PackageWarning{foobar}{^^A
%   Sed feugiat. Cum sociis natoque penatibus et
%   magnis dis parturient montes, nascetur ridiculus mus. Ut
%   pellentesque augue sed urna. Vestibulum diam eros, fringilla et,
%   consectetuer eu, nonummy id, sapien. Nullam at lectus. In sagittis
%   ultrices mauris. Curabitur malesuada erat sit amet massa. Fusce
%   blandit. Aliquam erat volutpat.  Aliquam euismod. Aenean vel lectus.
%   Nunc imperdiet justo nec dolor;}
%
% The command
% \begin{Verbatim}
% \HardWrap{\PackageWarning{foobar}}{50}{\HardWrapSetup}{\MessageBreak}{%
%   Sed feugiat. Cum sociis natoque...;}
% \end{Verbatim}
% produces the following in the console output:
% \begin{Verbatim}[fontsize=\footnotesize]
% Package foobar Warning: Sed feugiat. Cum sociis natoque penatibus et magnis
% (foobar)                dis parturient montes, nascetur ridiculus mus. Ut
% (foobar)                pellentesque augue sed urna. Vestibulum diam eros,
% (foobar)                fringilla et, consectetuer eu, nonummy id, sapien.
% (foobar)                Nullam at lectus. In sagittis ultrices mauris.
% (foobar)                Curabitur malesuada erat sit amet massa. Fusce
% (foobar)                blandit. Aliquam erat volutpat. Aliquam euismod.
% (foobar)                Aenean vel lectus. Nunc imperdiet justo nec
% (foobar)                dolor; on input line 102.
% \end{Verbatim}
% Compare this to that below without the manual wrapping; \TeX\ breaks lines at 79 characters without keeping words together: (e.g., `Vestibulum' broken between lines two and three)
% \begin{Verbatim}[fontsize=\footnotesize]
% Package foobar Warning: Sed feugiat. Cum sociis natoque penatibus et magnis dis
%  parturient montes, nascetur ridiculus mus. Ut pellentesque augue sed urna. Ves
% tibulum diam eros, fringilla et, consectetuer eu, nonummy id, sapien. Nullam at
%  lectus. In sagittis ultrices mauris. Curabitur malesuada erat sit amet massa. 
% Fusce blandit. Aliquam erat volutpat. Aliquam euismod. Aenean vel lectus. Nunc 
% imperdiet justo nec dolor; on input line 110.
% \end{Verbatim}
%
% The \cs{HardWrap} macro can also be useful when writing to an external file.
% For example, one may write
% \begin{Verbatim}
% \newwrite\textfile
% \immediate\openout\textfile=\jobname.txt\relax
% \HardWrap{\immediate\write\textfile}{50}{\HardWrapSetup}{^^J}{%
%   Sed feugiat. Cum sociis natoque...;}
% \closeout\textfile
% \end{Verbatim}
% to write the text to a file after being hardwrapped with carriage returns (\verb|^^J|) after each line.
%
% \newwrite\textfile
% \immediate\openout\textfile=\jobname.txt\relax
% \HardWrap{\immediate\write\textfile}{50}{\HardWrapSetup}{^^J}{%
%   Sed feugiat. Cum sociis natoque penatibus et
%   magnis dis parturient montes, nascetur ridiculus mus. Ut
%   pellentesque augue sed urna. Vestibulum diam eros, fringilla et,
%   consectetuer eu, nonummy id, sapien. Nullam at lectus. In sagittis
%   ultrices mauris. Curabitur malesuada erat sit amet massa. Fusce
%   blandit. Aliquam erat volutpat.  Aliquam euismod. Aenean vel lectus.
%   Nunc imperdiet justo nec dolor.}
% \closeout\textfile
%
% \newpage
% \splittoc
% \part{Implementation}
%\iffalse
%<*package>
%\fi
% This is the package implementation.
%
% \section{Required Packages}
%    \begin{macrocode}
\RequirePackage{ifplatform}
%    \end{macrocode}
%
%
% \section{Counters and variables}
% \begin{macro}{\hw@charcount,\hw@wordcount}
% The \cs{hw@charcount} count holds the number of characters on the current
% line.  The \cs{hw@wordcount} count holds the number of characters in the current word.
%    \begin{macrocode}
\newcount\hw@charcount
\hw@charcount=-1\relax
%    \end{macrocode}
%
%    \begin{macrocode}
\newcount\hw@wordcount
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@currtext,\hw@currline,\hw@currword}
% We store the current word, current line, and current wrapped text in the
% following macros:
%    \begin{macrocode}
\def\hw@currtext{}
\def\hw@currline{}
\def\hw@currword{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@protected@newline}
% This macro is called each time a line break is created.  It typically holds
% \cs{MessageBreak} for log messages, but could be set to \cs{\char`\\} for typeset
% text.
%    \begin{macrocode}
\protected\def\hw@protected@newline{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@protected@space,\hw@expanding@space,\hw@kernel@space}
% The \cmd\hw@protected@space\ definition of `space' is designed to be switched for a real space later on using \cmd\hw@kernel@space. \cmd \hw@expanding@space\ is inserted into scratch variable as the `real' space char.
%    \begin{macrocode}
\protected\def\hw@protected@space{ }
\def\hw@expanding@space{ }
\let\hw@kernel@space\space
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@scanstop}
% This is a `quark' from expl3 designed to delimit the scanning; it will never be executed, else an infinite loop results.
%    \begin{macrocode}
\def\hw@scanstop{\hw@scanstop}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Main procedure}
%
% \begin{macro}{\HardWrap}
% Arguments:
% \marg{function}
% \marg{chars to wrap to}
% \marg{setup}
% \marg{newline}
% \marg{text}
%
% This is the macro that does everything.
% Note that the \cs{space} is first made `protected' and then restored again.
%    \begin{macrocode}
\newcommand\HardWrap[5]{%
  \begingroup
    \hw@maxprintline=#2\relax
    \let\space\hw@protected@space
    #3
    \edef\@tempa{#5}%
    \expandafter\hw@scan\@tempa\hw@scanstop
    \def\hw@protected@newline{#4}
    \let\space\hw@kernel@space
    \@temptokena={#1}%
    \expandafter\the\expandafter\@temptokena\expandafter{\hw@wrappedtext}
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@scan}
% Convenience wrapper for \cs{futurelet}.
%    \begin{macrocode}
\def\hw@scan{%
  \futurelet\let@token\hw@process
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@process}
% The \cs{hw@process} macro contains the actual word-wrapping algorithm.
% The text is scanned token by token.  Each token falls into one of three
% categories: (a)~the stop token \cs{hw@scanstop}, (b)~a space token, or
% (c)~anything else.
%    \begin{macrocode}
\def\hw@process{%
%    \end{macrocode}
% If we encounter the \cs{hw@scanstop} token, then we've hit the end of the
% string. Swallow the stop token and stop processing.
%    \begin{macrocode}
  \ifx\let@token\hw@scanstop\relax
    \hw@process@end
    \let\next\@gobble
%    \end{macrocode}
% If we find a space, add the word to the current line if it fits, otherwise
% insert a line break and put the word on its own line.  Continue reading tokens.
%    \begin{macrocode}
  \else
    \ifx\let@token\@sptoken
      \ifnum\numexpr(\hw@charcount+\hw@wordcount+1)\relax<\hw@maxprintline
        \advance\hw@charcount by \hw@wordcount
        \ifx\hw@currline\@empty
          \protected@edef\hw@currline{\hw@currword}%
        \else
          \advance\hw@charcount by 1\relax % account for the space character
          \protected@edef\hw@currline{\hw@currline\hw@expanding@space\hw@currword}%
        \fi
      \else
        \hw@charcount=\hw@wordcount\relax
        \protected@edef\hw@currtext{\hw@currtext\hw@currline\hw@protected@newline}%
        \let\hw@currline\hw@currword
      \fi
      \hw@wordcount=1\relax
      \let\hw@currword\@empty
      \let\next\hw@dochar
%    \end{macrocode}
% If the token is neither the stop token nor a space, we'll just append it to
% the current word and continue reading tokens.
%    \begin{macrocode}
    \else
      \advance\hw@wordcount by 1\relax
      \let\next\hw@dochar
    \fi
  \fi
  \next
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@dochar}
% After a letter, the \cs{hw@dochar} macro just appends a token (non-space and non-stop token) to the current word.
% After a space token, however, the following argument could possibly be \cs{hw@scanstop}, so we need to special-case this branch. I have a feeling that a `gobble-space' function is possible which would make this all a bit more elegant but this works for now.
%    \begin{macrocode}
\def\hw@dochar#1{%
  \def\@tempa{#1}%
  \ifx\@tempa\hw@scanstop
    \hw@process@end
  \else
    \protected@edef\hw@currword{\hw@currword#1}%
    \expandafter\hw@scan
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@process@end}
% The final stage of processing the text. We've just come to the end of the final
% word on the final line: add the word to the current line if it fits, otherwise insert a line
% break and put the word on its own line.
%    \begin{macrocode}
\def\hw@process@end{%
    \ifnum\numexpr(\hw@charcount+\hw@wordcount+1)\relax<\hw@maxprintline\relax
      \protected@edef\hw@wrappedtext{%
        \hw@currtext
        \ifx\hw@currline\@empty\else
          \hw@currline\space
        \fi
        \hw@currword
      }%
    \else
      \protected@edef\hw@wrappedtext{%
        \hw@currtext\hw@currline\hw@protected@newline\hw@currword
      }%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\HardWrapSetup}
% This is the command to use if you want to `special-case' some meanings to be more appropriate inside message text. It is used by default for argument \verb|#3| in \cs{HardWrap}.
%    \begin{macrocode}
\def\HardWrapSetup{%
    \let \  \hw@protected@space
    \let \\ \hw@protected@newline
}
%    \end{macrocode}
% \end{macro}
%
% \section{Utility Macros}
%
% \begin{macro}{\hw@strlen}
% A simple string-length macro.
%    \begin{macrocode}
\def\hw@strlen#1{%
 \number\numexpr\hw@Ncharscan#1\hw@scanstop\relax
}
\def\hw@Ncharscan#1{%
 \ifx#1\hw@scanstop
   \expandafter\@gobble
 \else
   \expandafter\@firstofone
 \fi
 {+1\hw@Ncharscan}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@maxprintline}
% Some code to detect \TeX's \textit{max\_print\_line} value.
% This doesn't work with MiKTeX (yet?), so we disable it under Windows always.
%    \begin{macrocode}
\newcount\hw@maxprintline
\ifwindows\else
  \ifnum\pdfshellescape>0\relax
    \hw@maxprintline=\@@input"|kpsewhich -var-value=max_print_line"\relax
  \fi
\fi
\ifnum\hw@maxprintline=0\relax % default
  \hw@maxprintline=79\relax % default
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmaxprintline}
% In case the code above borks the \cs{hw@maxprintline} value, the user can set it manually with the \cs{setmaxprintline} macro.
%    \begin{macrocode}
\newcommand*{\setmaxprintline}[1]{%
  \hw@maxprintline=#1\relax
}
%    \end{macrocode}
% \end{macro}
%
% \section{Wrapping Log Messages}
%
% \begin{samepage}
% \LaTeX{} informational, warning, and error messages are printed in the
% format:
% \begin{center}
%   \ttfamily
%   \begin{tabular}{l@{\space}l}
%     Package \meta{pkgname} Info: & This is an informational message.\\
%     (\meta{pkgname})             & That spans multiple lines. The\\
%     (\meta{pkgname})             & \string\MessageBreak\space macro is used to split\\
%     (\meta{pkgname})             & the text across lines.\\
%     \leftarrowfill$A$\rightarrowfill & \leftarrowfill$B$\rightarrowfill\\
%     \multicolumn{2}{c}{\leftarrowfill$\textrm{\textit{max\_print\_line}}$\rightarrowfill}
%   \end{tabular}
% \end{center}
% \end{samepage}
% The maximum line length ($\textit{max\_print\_line}$) is used by
% \TeX{} for all log file and terminal output.  It defaults to 79 characters
% but may be changed by editing the \texttt{texmf.cnf} file.
%
% The length of $A$ is the sum of three values:
% \begin{enumerate}
%   \item whether it's a class or package message: add 6 for class messages,
%   and 8 for package messages;
%   \item the length of the package name;
%   \item the type of message: information (add 7), warning (add 10), or error
%   (add~10).
% \end{enumerate}
% The length of $B$ is the difference between $\textit{max\_print\_line}$ and
% $A$ plus one for the extra space between them.
% Note that the length of $B$ for the warning and error text is the same.
%
% \begin{macro}{\hw@suffix}
% This string is used as a suffix to \LaTeX\ warnings and info messages
% to push the automatic `on page $N$' next onto the next line.
% This makes writing grammatically correct messages somewhat easier.
%    \begin{macrocode}
\newcommand\hw@suffix{^^JThis message occurred}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\GeneratePackageLogMacros,\GenerateClassLogMacros}
% Shortcuts are provided for generating logging macros that automatically wrap
% the text provided to them.  The \cs{GeneratePackageLogMacros} and
% \cs{GenerateClassLogMacros} calculate the various lengths of $B$
% appropriately.
%    \begin{macrocode}
\newcommand{\GeneratePackageLogMacros}[2][]{%
  \hw@generate@logging@macros{package}{#1}{#2}%
    {\hw@maxprintline-\hw@strlen{#2}-16}% info length
    {\hw@maxprintline-\hw@strlen{#2}-19}% warning length
}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\GenerateClassLogMacros}[2][]{%
  \hw@generate@logging@macros{class}{#1}{#2}%
    {\hw@maxprintline-\hw@strlen{#2}-14}% info length
    {\hw@maxprintline-\hw@strlen{#2}-17}% warning length
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hw@generate@logging@macros}
% And now for the code that generates all the logging macros. Arguments:
% \begin{enumerate}\itemsep=0pt\parskip=0pt\parsep=0pt
% \item \marg{`package' or `class'}
% \item \marg{prefix}
% \item \marg{package name}
% \item \marg{info message length}
% \item \marg{warning message length}
% \end{enumerate}
% The \meta{info\dots} and \meta{warning message length} values correspond to
% the calculation of $B$ as described above.
%
% First of all, if the \meta{prefix} is not specified then fall back to the \meta{package name}:
%    \begin{macrocode}
\newcommand{\hw@generate@logging@macros}[5]{%
  \def\@tempa{#2}\ifx\@tempa\@empty
    \hw@generate@logging@macros@aux{#1}{#3}{#3}{#4}{#5}%
  \else
    \hw@generate@logging@macros@aux{#1}{#2}{#3}{#4}{#5}%
  \fi
}
%    \end{macrocode}
% Finally, the main procedure. Info messages first:
%    \begin{macrocode}
\newcommand{\hw@generate@logging@macros@aux}[5]{%
  \expandafter\edef\csname #2@info\endcsname##1{%
    \noexpand\HardWrap
      {\@nameuse{hw@#1@info}{#3}}
      {\number\numexpr#4\relax}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {##1}%
  }%
  \expandafter\edef\csname #2@info@noline\endcsname##1{%
    \noexpand\HardWrap
      {\@nameuse{hw@#1@info@noline}{#3}}
      {\number\numexpr#4\relax}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {##1}%
  }%
%    \end{macrocode}
% Now warnings:
%    \begin{macrocode}
  \expandafter\edef\csname #2@warning\endcsname##1{%
    \noexpand\HardWrap
      {\@nameuse{hw@#1@warning}{#3}}
      {\number\numexpr#5\relax}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {##1}%
  }%
  \expandafter\edef\csname #2@warning@noline\endcsname##1{%
    \noexpand\HardWrap
      {\@nameuse{hw@#1@warning@noline}{#3}}
      {\number\numexpr#5\relax}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {##1}%
  }%
%    \end{macrocode}
% And finally errors.
%
% In addition to the \meta{info} and \meta{warning} lengths,
% the \cs{PackageError} macro allows for
% additional text to be displayed when the user requests it.  This text
% doesn't have anything prepended to each line, so the length of this text is
% the same as $\textit{max\_print\_line}$.
%    \begin{macrocode}
  \expandafter\edef\csname #2@error\endcsname##1##2{%
    \noexpand\HardWrap
      {\xdef\noexpand\hw@tempa}
      {\number\numexpr#5\relax}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {\MessageBreak ##1}%
    \noexpand\HardWrap
      {\xdef\noexpand\hw@tempb}
      {\the\hw@maxprintline}
      {\unexpanded\expandafter{\HardWrapSetup}}
      {\noexpand\MessageBreak}
      {\MessageBreak ##2}%
    \unexpanded{%
      \@nameuse{hw@#1@error}{#3}{\hw@tempa}{\hw@tempb}%
    }%
  }%
}
%    \end{macrocode}
% Here are our wrappers for \cs{PackageInfo}, et~al., which are
% used above to generalise the code a little. Note that these macros are
% \cs{protected}, which allows them to be used in an expanding context
% without a preceeding \cs{noexpand}.
%    \begin{macrocode}
\protected\def\hw@class@info          #1#2{\ClassInfo   {#1}{#2\hw@suffix}}
\protected\def\hw@class@info@noline   #1#2{\ClassInfo   {#1}{#2\@gobbletwo}}
\protected\def\hw@class@warning       #1#2{\ClassWarning{#1}{#2\hw@suffix}}
\protected\def\hw@class@warning@noline#1#2{\ClassWarning{#1}{#2\@gobbletwo}}
\protected\def\hw@class@error         #1#2{\ClassError  {#1}{#2}}
%    \end{macrocode}
%    \begin{macrocode}
\protected\def\hw@package@info          #1#2{\PackageInfo   {#1}{#2\hw@suffix}}
\protected\def\hw@package@info@noline   #1#2{\PackageInfo   {#1}{#2\@gobbletwo}}
\protected\def\hw@package@warning       #1#2{\PackageWarning{#1}{#2\hw@suffix}}
\protected\def\hw@package@warning@noline#1#2{\PackageWarning{#1}{#2\@gobbletwo}}
\protected\def\hw@package@error         #1#2{\PackageError  {#1}{#2}}
%    \end{macrocode}
% \end{macro}
%
% Fin.
%
%\iffalse
%</package>
%\fi
%
% \Finale
%
% \posttoc
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by TeX:}
% \typeout{*}
% \typeout{* \space\space\space hardwrap.sty}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput

